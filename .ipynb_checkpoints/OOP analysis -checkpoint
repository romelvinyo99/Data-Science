{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "15989070-5069-4d9f-985a-a96a9e32bdfb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0a91d948-8109-4cc9-b83e-0e79613d31b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "class SupermarketSalesData:\n",
    "    def __init__(self, file_path):\n",
    "        self.file_path = file_path\n",
    "        self.data = pd.read_csv(file_path)\n",
    "\n",
    "    def raw_clean_data_check(self):\n",
    "        # printing out a sample of the raw data\n",
    "        a = self.data.head(5)\n",
    "        b = self.data.tail(5)\n",
    "        # checking the summary information(shape datatypes variables)\n",
    "        c = self.data.info()\n",
    "        duplicate = self.data.duplicated().any()\n",
    "        if duplicate:\n",
    "            # print out the duplicated rows\n",
    "            print(f\"The duplicated rows are: \\n\\t{self.data[self.data.duplicated()]}\")\n",
    "            # removing the duplicates\n",
    "            self.data.drop_duplicates(inplace=True)\n",
    "        else:\n",
    "            pass\n",
    "        # from the analysis some variables are wrongly calculated\n",
    "        self.data[\"cogs\"] = self.data[\"Quantity\"] * self.data[\"Unit price\"] * 0.05\n",
    "        self.data[\"Revenue\"] = self.data[\"Quantity\"] * self.data[\"Unit price\"]\n",
    "        self.data[\"gross income\"] = self.data[\"Revenue\"] - self.data[\"cogs\"]\n",
    "        self.data[\"gross margin percentage\"] = ((self.data[\"Revenue\"] - self.data[\"cogs\"]) / self.data[\"Revenue\"]) * 100\n",
    "        # returning the necessary values\n",
    "        return a, b, c, self.data\n",
    "\n",
    "\n",
    "    def summary_statistics(self):\n",
    "        self.raw_clean_data_check()\n",
    "        # checking summary stats for the floats and integer variables\n",
    "        a = self.data.describe()\n",
    "        b = self.data[\n",
    "            [\"Unit price\", \"Total\", \"Quantity\", \"Tax 5%\", \"cogs\", \"gross margin percentage\", \"gross income\",\n",
    "             \"Rating\"]].median()\n",
    "        return a, b\n",
    "\n",
    "    def question1(self):\n",
    "        self.raw_clean_data_check()\n",
    "\n",
    "        product_gender = self.data.groupby([\"Gender\", \"Product line\"])[\"Quantity\"].count()\n",
    "        fig, ax = plt.subplots(figsize=(6, 6))\n",
    "        bars = self.data.unstack().plot(kind=\"bar\", ax=ax)\n",
    "        for bar in bars.containers:\n",
    "            for rect in bar.patches:\n",
    "                height = rect.get_height()\n",
    "                ax.annotate(\n",
    "                    f\"{height:.0f}\",\n",
    "                    xy=(rect.get_x() + rect.get_width() / 2, height),\n",
    "                    xytext=(0, 3),\n",
    "                    textcoords=\"offset points\",\n",
    "                    ha=\"center\",\n",
    "                    va=\"bottom\"\n",
    "                )\n",
    "        plt.title(\"product line distribution by gender\")\n",
    "        plt.xlabel(\"Product line\")\n",
    "        plt.ylabel(\"product line\")\n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "\n",
    "        product_line = self.data.groupby(\"Product line\")[\"Quantity\"].count()\n",
    "        fig, ax = plt.subplots(figsize=(6, 6))\n",
    "        product_line.plot(kind=\"bar\", color=[\"Yellow\", \"pink\"], alpha=0.5)\n",
    "        for rect in ax.patches:\n",
    "            height = rect.get_height()\n",
    "            ax.annotate(\n",
    "                f'{height:.0f}',\n",
    "                xy=(rect.get_x() + rect.get_width() / 2, height),\n",
    "                xytext=(0, 3),\n",
    "                textcoords=\"offset points\",\n",
    "                ha=\"center\",\n",
    "                va=\"bottom\"\n",
    "            )\n",
    "        plt.title(\"product sale\")\n",
    "        plt.xlabel(\"product\")\n",
    "        plt.ylabel(\"count\")\n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "\n",
    "\n",
    "    def question2(self):\n",
    "        self.raw_clean_data_check()\n",
    "\n",
    "        gender_rating_comparison = self.data.groupby(\"Gender\")[\"Rating\"].agg([\"mean\", \"median\", \"count\"])\n",
    "        fig, ax = plt.subplots(figsize=(6, 6))\n",
    "        gender_rating_comparison.plot(kind=\"bar\", subplots=False, ax=ax, color=[\"green\", \"red\", \"yellow\"],alpha=0.5)\n",
    "        for rect in ax.patches:\n",
    "            height = rect.get_height()\n",
    "            ax.annotate(\n",
    "                f'{height:.0f}',\n",
    "                xy=(rect.get_x() + rect.get_width() / 2, height),\n",
    "                xytext=(0, 3),\n",
    "                textcoords=\"offset points\",\n",
    "                ha=\"center\",\n",
    "                va=\"bottom\"\n",
    "            )\n",
    "        plt.title(\"mean and median Gender agaist rating\")\n",
    "        plt.xlabel(\"gender\")\n",
    "        plt.ylabel(\"count/mean/median\")\n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "\n",
    "\n",
    "    def question3(self):\n",
    "        self.raw_clean_data_check()\n",
    "        \n",
    "        branch_city_rating = self.data.groupby([\"Branch\", \"City\", \"Customer type\"])[\"Rating\"].agg([\"mean\", \"median\", \"count\"])\n",
    "        fig, ax = plt.subplots\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a834b2f-74c0-45b4-9d02-0190e9b280ae",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
